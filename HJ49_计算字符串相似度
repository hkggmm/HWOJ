#include <iostream>
#include <string>
#include <algorithm>
#include <vector>

using namespace std;

//比较常规的动态规划计算操作数

int main()
{
    string s1,s2;
    while(cin>>s1>>s2){
        int len1 = s1.size();
        int len2 = s2.size();
        vector<vector<int >> dp(len1 + 1, vector<int>(len2 + 1, 0));
        for(int i = 0; i <= len1; i++)    //初始化边界条件：当字符串A个数为0，字符串B个数为i时，所需操作为i
            dp[i][0] = i;
        for(int i = 0; i <= len2; i++)    //反之亦然
            dp[0][i] = i;
        
        for(int i = 1; i <= len1 ; i++){
            for(int j = 1; j <= len2; j++){
                if(s1[i - 1] == s2[j - 1])
                    dp[i][j] = dp[i - 1][j - 1];  //若前一个字符相同，则所需操作数和[i-1][j-1]相同
                else{
                    int tmp = min(dp[i - 1][j], dp[i][j - 1]); //所需最少操作数应该是dp[i-1][j]和dp[i][j-1]和dp[i-1][j-1]三者最小值再加上1，此时前一个字符已经不相同
                    dp[i][j] = 1 + min(tmp, dp[i-1][j-1]);
                }
            }
        }
        cout <<'1'<<'/'<<(dp[len1][len2] + 1)<<endl;
    }
    return 0;
}
